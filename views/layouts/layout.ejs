<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
	
    <title><%= ci.title %></title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	  <!--<meta name="app-url" content="//www.foire.tn/">-->
    <!--<meta name="robots" content="index, follow">-->
    <meta name="title" content="<%= ci.title %>">
    <meta name="description" content="<%= ci.description %>">
    <meta name="keywords" content="<%= ci.description %>">
    <meta itemprop="name" content="Madar , ensemble nous cryons la diffÃ©rence !">
    <meta itemprop="description" content="<%=ci.title%>">
    <meta itemprop="image" content="<%=ci.title%>">
    <meta name="twitter:title" content="<%= ci.title %>">
    <meta name="twitter:description" content="<%=ci.description%>">
    <meta name="twitter:image" content="<%=ci.thumbnail%>">
    <meta property="og:title" content="<%=ci.title%>">
    <meta property="og:description" content="<%=ci.description%>">
    <meta property="og:image" content="<%=ci.thumbnail%>">
    <style>
    html,body,iframe { width: 100%; height: 100%; padding: 0; margin: 0; border: none}
    iframe { display:block }
    </style>
  </head>
  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/min/production.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
